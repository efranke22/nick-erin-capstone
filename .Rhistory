theme(plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10),
axis.text = element_markdown(family = "mono"),
axis.title = element_markdown(family="mono", size = 8),
legend.text = element_markdown(family = "mono"))
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
library(tidycensus)
library(tidyverse)
library(survey)
library(srvyr)
library(sf)
library(ggtext)
library(tidymodels)
library(spdep)
library(probably)
tidymodels_prefer()
conflicted::conflict_prefer("spautolm", "spatialreg")
#see DataCleaning.Rmd for data cleaning steps
load("DataShapefiles/lead_spatial.RData")
river_lakes <- st_read("DataShapefiles/shp_water_lakes_rivers")
roads <- st_read("DataShapefiles/tl_2019_27_prisecroads")
roads_sub <- st_crop(roads,st_bbox(lead_census))
lead_census %>%
ggplot()+
geom_sf(fill = "navy", lwd = 0.2, color = "navy")+
geom_sf(data = roads, fill = "lightblue",color = "lightblue", lwd=0.2)+
theme_classic()+
labs(title = "Twin Cities Metropolitan region on MN road map")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
plot.title.position = "plot",
plot.title = element_markdown(family = "mono"),
plot.subtitle = element_markdown(family = "mono", size = 8))+
scale_fill_manual(values = c("navy", "red"))
river_lakes_big <- river_lakes %>%
filter(AREA_ACRES >= 500)
roads_metro <- st_crop(roads,st_bbox(lead_census))
lead_census %>%
ggplot()+
geom_sf(aes(fill=as.factor(HighLead)), lwd = 0.2, color = "white")+
geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Elevated blood lead levels in the Twin Cities", subtitle = "<strong><span style='color:red'>Red tracts have at least 1% of children tested with high elevated blood levels</span></strong></b>")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
plot.title.position = "plot",
plot.title = element_markdown(family = "mono"),
plot.subtitle = element_markdown(family = "mono", size = 8))+
scale_fill_manual(values = c("navy", "red"))
lead_census %>%
ggplot()+
geom_sf(aes(fill = propHomesBuiltPre1950), lwd = 0.2, color = "white")+
theme_classic()+
labs(title = "Proportion of homes built before 1950 by Twin Cities census tract", fill = "")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 9))+
scale_fill_viridis_c()
lead_census %>%
mutate(highleadNewHome = case_when(HighLead == "1" & propHomesBuiltPre1950 <= 0.25 ~ 2,
HighLead == "1" & propHomesBuiltPre1950 > 0.25 ~ 1,
TRUE ~ 0)) %>%
ggplot()+
geom_sf(aes(fill=as.factor(highleadNewHome)), lwd = 0.2, color = "white")+
geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Elevated blood lead levels in the Twin Cities", subtitle = "<strong><span style='color:red'>Red and pink tracts have at least 1% of children tested with EBLLs </span></strong></b>")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
plot.title.position = "plot",
plot.title = element_markdown(family = "mono"),
plot.subtitle = element_markdown(family = "mono", size = 8))+
scale_fill_manual(values = c("navy", "red", "pink"))
lead_census_clean <- lead_census %>%
filter(!is.na(medincomeE), !is.na(medageE), !is.na(propHomesBuiltPre1950), !is.na(tested))
lead_census_clean <- lead_census_clean %>%
mutate(WhyUNoTest = case_when(TestingHigh == 0 & CensusAgeE < 66 & HighLead == 1 ~ 1,
TRUE ~ 0))
lead_census_clean %>%
ggplot()+
geom_sf(aes(fill = WhyUNoTest), lwd = 0.2, color = "white")+
theme_classic()+
labs(title = "Places with EBLL, new houses but not getting tested", fill = "")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 9))+
scale_fill_viridis_c()
lead_testing <- lead_census_clean %>%
st_drop_geometry() %>%
mutate(testRatio = tested/numChildtestingage,
CensusAgeE = propHomesBuiltPre1950 * runif(1, 72,122) + propHomesBuilt1950to1969*62.5 + propHomesBuilt1970to1989*42.5 + propHomesBuilt1990to2009*22.5 + propHomesBuilt2010tonow*6, highIncome = case_when(medincomeE > 100000 ~ "highInc",
TRUE ~ "lowerInc"),
Homecat = cut(CensusAgeE, 3),
multipleTest = case_when(testRatio > 1 ~ "manyTest",
TRUE ~ "lessTest"))
facet_names <- c(
"manyTest" = "More Than 1 Test Per Person",
"lessTest" = "Less Than 1 Test Per Person")
lead_testing %>% ggplot(aes(x = CensusAgeE, fill = factor(HighLead)))+
geom_density(alpha = 0.35)+
facet_wrap(~multipleTest, labeller = as_labeller(facet_names)) +
theme_classic() +
labs(y="", x="Average Census House Age (In years)", fill ="Lead Level") +
scale_fill_manual(values = c("red", "navy"), labels = c("Low","High"))+
theme(plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10),
axis.text = element_markdown(family = "mono"),
axis.title = element_markdown(family="mono", size = 8),
legend.title = element_markdown(family = "mono", size = 8),
legend.text = element_markdown(family = "mono"))
lead_testing %>%
filter(HighLead == 1) %>%
ggplot(aes(x=medincomeE, fill = multipleTest))+
geom_density(alpha=0.5)+
labs(fill ="", x = "Median Income in Census Tract", y = "")+
scale_fill_manual(values = c("red", "navy"), labels = c("1 Test or Less","More Than 1 Test")) +
theme_classic()+
theme(plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10),
axis.text = element_markdown(family = "mono"),
axis.title = element_markdown(family="mono", size = 8),
legend.text = element_markdown(family = "mono"))
lead_census %>%
ggplot() +
geom_sf(aes(fill = as.factor(HighLead)))+
scale_fill_manual(values = c("navy", "red"))+
theme_classic()+
geom_sf(data=river_lakes_big, fill="lightblue")+
labs(title = "Actual high lead census tracts in Twin Cities Metro", fill = "High Lead")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_text(family = "mono", size = 9),
plot.title = element_text(family = "mono", size =11),
plot.title.position = "plot",
legend.text = element_text(family = "mono"))
# MODEL RECIPE AND TUNING
set.seed(123)
lasso_log_variables <- lead_census %>%
mutate(HighLead = as.factor(HighLead),
HighLead = relevel(factor(HighLead), ref="0"),
testRatio = tested/numChildtestingage) %>%
select(HighLead, medageE, medincomeE, NumHouseE, PopE, propFamilyHouseholds, propHomesBuiltPre1950, SSIRecpE, CensusAgeE, tested, MarrCoupleChldU3E, testRatio, GEOID) %>%
drop_na() %>% st_drop_geometry()
data_cv10 <- vfold_cv(lasso_log_variables, v = 10)
logistic_lasso_spec_tune <- logistic_reg() %>%
set_engine('glmnet') %>%
set_args(mixture = 1, penalty = tune()) %>%
set_mode('classification')
logistic_rec <- recipe(HighLead~medageE + medincomeE + NumHouseE + PopE + propFamilyHouseholds + propHomesBuiltPre1950 + SSIRecpE + CensusAgeE + tested + MarrCoupleChldU3E +testRatio, data = lasso_log_variables) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
log_lasso_wf <- workflow() %>%
add_recipe(logistic_rec) %>%
add_model(logistic_lasso_spec_tune)
penalty_grid <- grid_regular(
penalty(range = c(-10, 10)),
levels = 100)
tune_output <- tune_grid(
log_lasso_wf,
resamples = data_cv10,
metrics = metric_set(roc_auc,accuracy),
control = control_resamples(save_pred = TRUE, event_level = 'second'),
grid = penalty_grid
)
autoplot(tune_output) + theme_classic()
# BEST SE PENALTY
best_se_penalty <- select_by_one_std_err(tune_output, metric = 'roc_auc', desc(penalty))
best_se_penalty
final_fit_se <- finalize_workflow(log_lasso_wf, best_se_penalty) %>%
fit(data = lasso_log_variables)
# Variables not driven to 0: medageE, medincomeE, propHomesBuiltPre1950, tested, testRatio
final_fit_se %>% tidy()
# VARIABLE IMPORTANCE
glmnet_output <- final_fit_se %>% extract_fit_engine()
bool_predictor_exclude <- glmnet_output$beta==0
var_imp <- sapply(seq_len(nrow(bool_predictor_exclude)), function(row) {
this_coeff_path <- bool_predictor_exclude[row,]
ncol(bool_predictor_exclude) - which.min(this_coeff_path) + 1
})
var_imp_data <- tibble(
var_name = rownames(bool_predictor_exclude),
var_imp = var_imp
)
var_imp_data %>% arrange(desc(var_imp))
lasso_percent_variables <- lead_census %>%
mutate(HighLead = as.factor(HighLead),
HighLead = relevel(factor(HighLead), ref="0"),
testRatio = tested/numChildtestingage,
area = st_area(geometry),
density = PopE/area) %>%
select(HighLead, medageE, medincomeE, NumHouseE, PopE, propFamilyHouseholds, propHomesBuiltPre1950, SSIRecpE, CensusAgeE, tested, MarrCoupleChldU3E, testRatio, GEOID, propHomesBuilt1950to1969, propHomesBuilt1970to1989, propHomesBuilt1990to2009, propHomesBuilt2010tonow, percent, density) %>%
filter(HighLead == "1") %>%
drop_na() %>% st_drop_geometry()
set.seed(123)
percent_cv10 <- vfold_cv(lasso_percent_variables, v = 10)
lm_lasso_spec_tune <-
linear_reg() %>%
set_args(mixture = 1, penalty = tune()) %>%
set_engine(engine = 'glmnet') %>%
set_mode('regression')
percent_rec <- recipe(percent ~., data = lasso_percent_variables) %>%
update_role(GEOID, new_role = "ID") %>% # we don't want to use ID as predictor
step_novel(all_nominal_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_predictors()) %>%
step_normalize(all_numeric_predictors())  # important step for LASSO
lasso_wf_percent <- workflow() %>%
add_recipe(percent_rec) %>%
add_model(lm_lasso_spec_tune)
penalty_grid <- grid_regular(
penalty(range = c(-5, 3)), #log10 transformed 10^-5 to 10^3
levels = 50)
tune_res <- tune_grid( # new function for tuning hyperparameters
lasso_wf_percent, # workflow
resamples = percent_cv10, # folds
metrics = metric_set(rmse),
grid = penalty_grid # penalty grid
)
autoplot(tune_res)
collect_metrics(tune_res) %>%
filter(.metric == 'rmse') %>%
select(penalty, rmse = mean)
best_penalty <- select_best(tune_res, metric = 'rmse', desc(penalty))
percent_final_wk <- finalize_workflow(lasso_wf_percent, best_penalty) # incorporates penalty value to workflow
percent_final_fit <- fit(percent_final_wk, data = lasso_percent_variables)
tidy(percent_final_fit)
percent_final_fit %>% predict(new_data = lasso_percent_variables)
# we can predict the percent of high lead children on average within 1.5%
tune_res %>% collect_metrics() %>% filter(penalty == (best_penalty %>% pull(penalty)))
lasso_mod_out <- percent_final_fit %>%
predict(new_data = lasso_percent_variables) %>%
bind_cols(lasso_percent_variables) %>%
mutate(resid = percent - .pred)
lasso_mod_out %>%
ggplot(aes(x = .pred, y = resid)) +
geom_point() +
geom_smooth(se = FALSE) +
geom_hline(yintercept = 0) +
theme_classic()
best_penalty <- select_best(tune_res, metric = 'rmse', desc(penalty))
percent_final_wk <- finalize_workflow(lasso_wf_percent, best_penalty) # incorporates penalty value to workflow
percent_final_fit <- fit(percent_final_wk, data = lasso_percent_variables)
percent_final_wk
lasso_mod_out %>%
ggplot(aes(x = .pred, y = resid)) +
geom_point() +
geom_smooth(se = FALSE) +
geom_hline(yintercept = 0) +
theme_classic()
lasso_mod_out
mod1 <- readRDS("logistic_mod1_edited.rds")
mod1 <- readRDS("logistic_mod1_edited.rds")
summary(mod1)
mod2 <- readRDS("logistic_mod2_edited.rds")
summary(mod2)
mod1 <- readRDS("logistic_mod1_edited.rds")
summary(mod1)
mod2 <- readRDS("logistic_mod2_edited.rds")
summary(mod2)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
library(tidycensus)
library(tidyverse)
library(survey)
library(srvyr)
library(sf)
library(ggtext)
library(tidymodels)
library(spdep)
library(probably)
tidymodels_prefer()
conflicted::conflict_prefer("spautolm", "spatialreg")
#see DataCleaning.Rmd for data cleaning steps
load("DataShapefiles/lead_spatial.RData")
river_lakes <- st_read("DataShapefiles/shp_water_lakes_rivers")
roads <- st_read("DataShapefiles/tl_2019_27_prisecroads")
roads_sub <- st_crop(roads,st_bbox(lead_census))
lead_census %>%
ggplot()+
geom_sf(fill = "navy", lwd = 0.2, color = "navy")+
geom_sf(data = roads, fill = "lightblue",color = "lightblue", lwd=0.2)+
theme_classic()+
labs(title = "Twin Cities Metropolitan region on MN road map")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
plot.title.position = "plot",
plot.title = element_markdown(family = "mono"),
plot.subtitle = element_markdown(family = "mono", size = 8))+
scale_fill_manual(values = c("navy", "red"))
river_lakes_big <- river_lakes %>%
filter(AREA_ACRES >= 500)
roads_metro <- st_crop(roads,st_bbox(lead_census))
lead_census %>%
ggplot()+
geom_sf(aes(fill=as.factor(HighLead)), lwd = 0.2, color = "white")+
geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Elevated blood lead levels in the Twin Cities", subtitle = "<strong><span style='color:red'>Red tracts have at least 1% of children tested with high elevated blood levels</span></strong></b>")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
plot.title.position = "plot",
plot.title = element_markdown(family = "mono"),
plot.subtitle = element_markdown(family = "mono", size = 8))+
scale_fill_manual(values = c("navy", "red"))
lead_census %>%
ggplot()+
geom_sf(aes(fill = propHomesBuiltPre1950), lwd = 0.2, color = "white")+
theme_classic()+
labs(title = "Proportion of homes built before 1950 by Twin Cities census tract", fill = "")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 9))+
scale_fill_viridis_c()
lead_census %>%
mutate(highleadNewHome = case_when(HighLead == "1" & propHomesBuiltPre1950 <= 0.25 ~ 2,
HighLead == "1" & propHomesBuiltPre1950 > 0.25 ~ 1,
TRUE ~ 0)) %>%
ggplot()+
geom_sf(aes(fill=as.factor(highleadNewHome)), lwd = 0.2, color = "white")+
geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Elevated blood lead levels in the Twin Cities", subtitle = "<strong><span style='color:red'>Red and pink tracts have at least 1% of children tested with EBLLs </span></strong></b>")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
plot.title.position = "plot",
plot.title = element_markdown(family = "mono"),
plot.subtitle = element_markdown(family = "mono", size = 8))+
scale_fill_manual(values = c("navy", "red", "pink"))
lead_census_clean <- lead_census %>%
filter(!is.na(medincomeE), !is.na(medageE), !is.na(propHomesBuiltPre1950), !is.na(tested))
lead_census_clean <- lead_census_clean %>%
mutate(WhyUNoTest = case_when(TestingHigh == 0 & CensusAgeE < 66 & HighLead == 1 ~ 1,
TRUE ~ 0))
lead_census_clean %>%
ggplot()+
geom_sf(aes(fill = as.factor(WhyUNoTest)), lwd = 0.2, color = "white")+
theme_classic()+
labs(title = "High Lead tracts with new houses but a low testing ratio", fill = "")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 9),
legend.position = "none")+
scale_fill_viridis_d()
lead_testing <- lead_census_clean %>%
st_drop_geometry() %>%
mutate(testRatio = tested/numChildtestingage,
CensusAgeE = propHomesBuiltPre1950 * runif(1, 72,122) + propHomesBuilt1950to1969*62.5 + propHomesBuilt1970to1989*42.5 + propHomesBuilt1990to2009*22.5 + propHomesBuilt2010tonow*6, highIncome = case_when(medincomeE > 100000 ~ "highInc",
TRUE ~ "lowerInc"),
Homecat = cut(CensusAgeE, 3),
multipleTest = case_when(testRatio > 1 ~ "manyTest",
TRUE ~ "lessTest"))
facet_names <- c(
"manyTest" = "More Than 1 Test Per Child",
"lessTest" = "Less Than 1 Test Per Child")
lead_testing %>% ggplot(aes(x = CensusAgeE, fill = factor(HighLead)))+
geom_density(alpha = 0.35)+
facet_wrap(~multipleTest, labeller = as_labeller(facet_names)) +
theme_classic() +
labs(y="", x="Average Census House Age (In years)", fill ="Lead Level") +
scale_fill_manual(values = c("navy", "red"), labels = c("Low","High"))+
theme(plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10),
axis.text = element_markdown(family = "mono"),
axis.title = element_markdown(family="mono", size = 8),
legend.title = element_markdown(family = "mono", size = 8),
legend.text = element_markdown(family = "mono"),
strip.text = element_text(family = "mono"),
strip.background = element_blank(),
axis.text.y = element_blank())
lead_testing %>%
filter(HighLead == 1) %>%
ggplot(aes(x=medincomeE, fill = multipleTest))+
geom_density(alpha=0.5)+
labs(fill ="", x = "Median Income in Census Tract", y = "")+
scale_fill_manual(values = c("red", "navy"), labels = c("less than 1 test/child"," more than 1 test/child")) +
theme_classic()+
theme(plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10),
axis.text = element_markdown(family = "mono"),
axis.title = element_markdown(family="mono", size = 8),
legend.text = element_markdown(family = "mono"),
axis.text.y = element_blank())
# MODEL RECIPE AND TUNING
set.seed(123)
lasso_log_variables <- lead_census %>%
mutate(HighLead = as.factor(HighLead),
HighLead = relevel(factor(HighLead), ref="0"),
testRatio = tested/numChildtestingage) %>%
select(HighLead, medageE, medincomeE, NumHouseE, PopE, propFamilyHouseholds, propHomesBuiltPre1950, SSIRecpE, CensusAgeE, tested, MarrCoupleChldU3E, testRatio, GEOID) %>%
drop_na() %>% st_drop_geometry()
data_cv10 <- vfold_cv(lasso_log_variables, v = 10)
logistic_lasso_spec_tune <- logistic_reg() %>%
set_engine('glmnet') %>%
set_args(mixture = 1, penalty = tune()) %>%
set_mode('classification')
logistic_rec <- recipe(HighLead~medageE + medincomeE + NumHouseE + PopE + propFamilyHouseholds + propHomesBuiltPre1950 + SSIRecpE + CensusAgeE + tested + MarrCoupleChldU3E +testRatio, data = lasso_log_variables) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors())
log_lasso_wf <- workflow() %>%
add_recipe(logistic_rec) %>%
add_model(logistic_lasso_spec_tune)
penalty_grid <- grid_regular(
penalty(range = c(-10, 10)),
levels = 100)
tune_output <- tune_grid(
log_lasso_wf,
resamples = data_cv10,
metrics = metric_set(roc_auc,accuracy),
control = control_resamples(save_pred = TRUE, event_level = 'second'),
grid = penalty_grid
)
autoplot(tune_output) + theme_classic()
# BEST SE PENALTY
best_se_penalty <- select_by_one_std_err(tune_output, metric = 'roc_auc', desc(penalty))
best_se_penalty
final_fit_se <- finalize_workflow(log_lasso_wf, best_se_penalty) %>%
fit(data = lasso_log_variables)
# Variables not driven to 0: medageE, medincomeE, propHomesBuiltPre1950, tested, testRatio
final_fit_se %>% tidy()
# VARIABLE IMPORTANCE
glmnet_output <- final_fit_se %>% extract_fit_engine()
bool_predictor_exclude <- glmnet_output$beta==0
var_imp <- sapply(seq_len(nrow(bool_predictor_exclude)), function(row) {
this_coeff_path <- bool_predictor_exclude[row,]
ncol(bool_predictor_exclude) - which.min(this_coeff_path) + 1
})
var_imp_data <- tibble(
var_name = rownames(bool_predictor_exclude),
var_imp = var_imp
)
var_imp_data %>% arrange(desc(var_imp))
final_output <- final_fit_se %>% predict(new_data = lasso_log_variables, type='prob') %>% bind_cols(lasso_log_variables)
final_output %>%
roc_curve(HighLead, .pred_1,event_level = 'second') %>%
autoplot()
threshold_output <- final_output %>%
threshold_perf(truth = HighLead, estimate = .pred_0, thresholds = seq(0,1,by=.01))
threshold_output %>%
filter(.metric == 'j_index') %>%
ggplot(aes(x = .threshold, y = .estimate)) +
geom_line() +
labs(y = 'J-index', x = 'threshold') +
theme_classic()
#Chose a threshold of 0.85 to predict HighLead
threshold_output %>%
filter(.metric == 'j_index') %>%
arrange(desc(.estimate))
log_metrics <- metric_set(accuracy,sens,yardstick::spec)
# Model gives an accuracy of 79.69% with a sensitivity of 87.7% and specificity of 77.05%
final_output %>%
mutate(.pred_class = make_two_class_pred(.pred_0, levels(HighLead), threshold = .85)) %>%
log_metrics(truth = HighLead, estimate = .pred_class, event_level = 'second')
# Final predictions
final_lasso_preds <- lead_census %>%
select(GEOID) %>%
right_join(final_output, by = "GEOID") %>%
mutate(.pred_class = make_two_class_pred(.pred_0, levels(HighLead), threshold = .85))
# logistic_mod1 <- fitme(HighLead ~ medincomeE + propHomesBuiltPre1950 + testRatio + medageE + Matern(1 | X+Y), fixed = list(nu = 0.5), family = binomial(), data=mod1data,control.HLfit = list(algebra='decorr'))
#logistic_mod1 <- fitme(HighLead ~ medincomeE + propHomesBuiltPre1950 + tested + testRatio + medageE + Matern(1 | X+Y), fixed = list(nu = 0.5), family = binomial(), data=final_lasso_preds,control.HLfit = list(algebra='decorr'))
mod1 <- readRDS("logistic_mod1_edited.rds")
summary(mod1)
# logistic_mod2 <- fitme(HighLead ~ IncomeCategory*propHomesBuiltPre1950 + testRatio + medageE + Matern(1 | X+Y), fixed = list(nu = 0.5), family = binomial(), data=mod2data,control.HLfit = list(algebra='decorr'))
mod2 <- readRDS("logistic_mod2_edited.rds")
summary(mod2)
final_output <- final_fit_se %>% predict(new_data = lasso_log_variables, type='prob') %>% bind_cols(lasso_log_variables)
final_output %>%
roc_curve(HighLead, .pred_1,event_level = 'second') %>%
autoplot()
threshold_output <- final_output %>%
threshold_perf(truth = HighLead, estimate = .pred_0, thresholds = seq(0,1,by=.01))
threshold_output %>%
filter(.metric == 'j_index') %>%
ggplot(aes(x = .threshold, y = .estimate)) +
geom_line() +
labs(y = 'J-index', x = 'threshold') +
theme_classic()
#Chose a threshold of 0.85 to predict HighLead
threshold_output %>%
filter(.metric == 'j_index') %>%
arrange(desc(.estimate))
log_metrics <- metric_set(accuracy,sens,yardstick::spec)
# Model gives an accuracy of 79.69% with a sensitivity of 87.7% and specificity of 77.05%
final_output %>%
mutate(.pred_class = make_two_class_pred(.pred_0, levels(HighLead), threshold = .85)) %>%
log_metrics(truth = HighLead, estimate = .pred_class, event_level = 'second')
# Final predictions
final_lasso_preds <- lead_census %>%
select(GEOID) %>%
right_join(final_output, by = "GEOID") %>%
mutate(.pred_class = make_two_class_pred(.pred_0, levels(HighLead), threshold = .85))
# Variables not driven to 0: medageE, medincomeE, propHomesBuiltPre1950, tested, testRatio
final_fit_se %>% tidy()
